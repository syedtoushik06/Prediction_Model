rmarkdown::render(
input = "Last-Prediction-Model.Rmd",    # your Rmd file
output_file = "Last-Prediction-Model.html",  # desired HTML filename
output_dir = getwd()                     # save to current working directory
)
getwd()
# Set working directory to your folder
setwd("D:/Stata Assignment/Prediction Model")
# Check that you are in the correct folder
getwd()
# Render your R Markdown file to HTML in the same folder
rmarkdown::render(
input = "Last-Prediction-Model.Rmd",
output_file = "Last-Prediction-Model.html",
output_dir = getwd()
)
# Set working directory to your folder
setwd("D:/Stata Assignment/Prediction Model")
# Confirm file exists
list.files()  # you should see "Last Prediction Model.Rmd" listed
# Render the R Markdown file to HTML in the same folder
rmarkdown::render(
input = "Last Prediction Model.Rmd",
output_file = "Last Prediction Model.html",
output_dir = getwd()
)
# Set working directory to your folder
setwd("D:/Stata Assignment/Prediction Model")
# Confirm file exists
list.files()  # you should see "Last Prediction Model.Rmd" listed
# Render the R Markdown file to HTML in the same folder
rmarkdown::render(
input = "Last Prediction Model.Rmd",
output_file = "Last Prediction Model.html",
output_dir = getwd()
)
required_packages <- c("ggplot2", "dplyr", "gridExtra", "caret", "Metrics",
"scales", "grid", "DT", "plotly", "shiny", "moments", "patchwork")
getwd()          # Check current working directory
setwd("path/to/folder")  # Set working directory
rmarkdown::render("Last-Prediction-Model.Rmd", output_file = "index.html")
rmarkdown::render("Last Prediction Model.Rmd", output_file = "index.html")
# Load required packages with error handling
required_packages <- c("ggplot2", "dplyr", "gridExtra", "caret", "Metrics",
"scales", "grid", "DT", "plotly", "shiny", "moments", "patchwork")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.align = "center",
fig.width = 8,
fig.height = 5,
cache = FALSE
)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# Load required packages with error handling
required_packages <- c(
"ggplot2", "dplyr", "gridExtra", "caret", "Metrics",
"scales", "grid", "DT", "plotly", "shiny", "moments", "patchwork", "hexbin", "kableExtra"
)
# Install missing packages
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
# Load all packages quietly
suppressPackageStartupMessages({
invisible(lapply(required_packages, function(pkg) {
library(pkg, character.only = TRUE, quietly = TRUE)
}))
})
p_hex <- ggplot(movies, aes(x = Rating, y = Votes)) +
geom_hex(bins = 25) +
geom_smooth(method = "lm", color = "#C0392B", se = TRUE, linetype = "solid", linewidth = 1.3) +
scale_fill_gradient(low = "#AED6F1", high = "#1F618D", name = "Count") +
scale_y_continuous(labels = comma) +
labs(
title = "IMDB Rating vs Votes (Hexbin Density with Trendline)",
x = "IMDB Rating",
y = "Number of Votes"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14, color = "black"),
axis.title.x = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
axis.title.y = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
legend.position = "right"
)
p_hex
---
title: "ðŸŽ¬ Prediction Model of the Relationship Between IMDB Rating & Movie Popularity"
movies <- read.csv("Dataset.csv")
colnames(movies) <- c("Title", "Rating", "Votes")
movies$Rating <- as.numeric(movies$Rating)
movies$Votes <- as.numeric(movies$Votes)
DT::datatable(
movies,
extensions = 'Buttons',
options = list(
pageLength = 10,
dom = 'Bfrtip',
buttons = list(
list(extend = 'copy', className = 'btn-sm'),
list(extend = 'csv', className = 'btn-sm'),
list(extend = 'excel', className = 'btn-sm'),
list(extend = 'pdf', className = 'btn-sm'),
list(extend = 'print', className = 'btn-sm')
),
scrollX = TRUE
),
rownames = FALSE
)
# Hexbin plot with trendline
p_hex <- ggplot(movies, aes(x = Rating, y = Votes)) +
geom_hex(bins = 25) +
geom_smooth(method = "lm", color = "#C0392B", se = TRUE, linetype = "solid", linewidth = 1.3) +
scale_fill_gradient(low = "#AED6F1", high = "#1F618D", name = "Count") +
scale_y_continuous(labels = comma) +
labs(
title = "IMDB Rating vs Votes (Hexbin Density with Trendline)",
x = "IMDB Rating",
y = "Number of Votes"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14, color = "black"),
axis.title.x = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
axis.title.y = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
legend.position = "right"
)
# Boxplot
movies$RatingGroup <- cut(movies$Rating,
breaks = seq(floor(min(movies$Rating)), ceiling(max(movies$Rating)), by = 0.5),
include.lowest = TRUE, right = FALSE, dig.lab = 3)
p_box <- ggplot(movies, aes(x = RatingGroup, y = Votes)) +
geom_boxplot(fill = "#F5B041", color = "#BA4A00", outlier.colour = "red", outlier.shape = 16, alpha = 0.7) +
scale_y_continuous(labels = comma) +
labs(
title = "Votes Distribution by IMDB Rating Group",
x = "IMDB Rating Group",
y = "Number of Votes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "black"),
plot.title = element_text(face = "bold", hjust = 0.5, size = 14, color = "black"),
axis.title.x = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
axis.title.y = element_text(face = "bold", hjust = 0.5, size = 13, color = "black")
)
grid.arrange(p_hex, p_box, ncol = 2)
# Hexbin plot with trendline
p_hex <- ggplot(movies, aes(x = Rating, y = Votes)) +
geom_hex(bins = 25) +
geom_smooth(method = "lm", color = "#C0392B", se = TRUE, linetype = "solid", linewidth = 1.3) +
scale_fill_gradient(low = "#AED6F1", high = "#1F618D", name = "Count") +
scale_y_continuous(labels = comma) +
labs(
title = "IMDB Rating vs Votes (Hexbin Density with Trendline)",
x = "IMDB Rating",
y = "Number of Votes"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 14, color = "black"),
axis.title.x = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
axis.title.y = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
legend.position = "right"
)
# Boxplot
movies$RatingGroup <- cut(movies$Rating,
breaks = seq(floor(min(movies$Rating)), ceiling(max(movies$Rating)), by = 0.5),
include.lowest = TRUE, right = FALSE, dig.lab = 3)
p_box <- ggplot(movies, aes(x = RatingGroup, y = Votes)) +
geom_boxplot(fill = "#F5B041", color = "#BA4A00", outlier.colour = "red", outlier.shape = 16, alpha = 0.7) +
scale_y_continuous(labels = comma) +
labs(
title = "Votes Distribution by IMDB Rating Group",
x = "IMDB Rating Group",
y = "Number of Votes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "black"),
plot.title = element_text(face = "bold", hjust = 0.5, size = 14, color = "black"),
axis.title.x = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
axis.title.y = element_text(face = "bold", hjust = 0.5, size = 13, color = "black")
)
grid.arrange(p_hex, p_box, ncol = 2)
p_hex
p_hex
# Boxplot
movies$RatingGroup <- cut(movies$Rating,
breaks = seq(floor(min(movies$Rating)), ceiling(max(movies$Rating)), by = 0.5),
include.lowest = TRUE, right = FALSE, dig.lab = 3)
p_box <- ggplot(movies, aes(x = RatingGroup, y = Votes)) +
geom_boxplot(fill = "#F5B041", color = "#BA4A00", outlier.colour = "red", outlier.shape = 16, alpha = 0.7) +
scale_y_continuous(labels = comma) +
labs(
title = "Votes Distribution by IMDB Rating Group",
x = "IMDB Rating Group",
y = "Number of Votes"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "black"),
plot.title = element_text(face = "bold", hjust = 0.5, size = 14, color = "black"),
axis.title.x = element_text(face = "bold", hjust = 0.5, size = 13, color = "black"),
axis.title.y = element_text(face = "bold", hjust = 0.5, size = 13, color = "black")
)
grid.arrange(p_hex, p_box, ncol = 2)
```
